% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processing.R
\name{autofilter}
\alias{autofilter}
\title{Perform data-driven filtering of scRNAseq data}
\usage{
autofilter(
  sobj,
  min_num_UMI,
  min_num_Feature,
  max_perc_mito,
  max_perc_hemoglobin,
  mad.score.threshold,
  globalfilter.complexity,
  globalfilter.mito,
  globalfilter.libsize
)
}
\arguments{
\item{sobj}{seurat object}

\item{min_num_UMI}{numeric, default is 1000, if no filter is desired set to -Inf}

\item{min_num_Feature}{numeric, default is 200, if no filter is desired set to -Inf}

\item{max_perc_mito}{numeric, default is 25, if no filter is desired set to Inf}

\item{max_perc_hemoglobin}{numeric, default is 25, if no filter is desired set to Inf}

\item{mad.score.threshold}{numeric, default is 2.5, threshold for median abs deviation thresholding, ie cutoffs set to \verb{median +/- mad * threshold}}

\item{globalfilter.complexity}{T/F, default T, whether to filter cells with lower than expected number of genes given number of UMIs}

\item{globalfilter.mito}{T/F, default T, whether to filter cells with higher than normal mito content}

\item{globalfilter.libsize}{T/F, default T, whether to filter cells with lower than normal UMI content}
}
\value{
a list object. first element is cells, filter status, filter reason. second element is commands and options used. third element is summary of pre-filter QC information. remaining elements illustrate the filtering steps with plots and number of cells removed.
}
\description{
Apply simple cutoffs and discover data-driven thresholds for poor quality cells in scRNAseq.
}
\details{
Simple cutoffs include minimum number of UMIs, minimum number of unique genes detected, maximum percent mito, and maximum percent hemoglobin.
More complex cutoffs are learnt for lower than expected complexity (defined for each cell as num unique genes / num UMIs). Additionally, median absolute deviation is used to exclude remaining cells with high mito content or low UMI content.
}
\examples{
# identify outliers
af <- autofilter(sobj)

# remove outliers
 goodcells <- af$cellstatus[af$cellstatus$filteredout==F,"barcodes"]
 sobj <- sobj[,goodcells]
}
